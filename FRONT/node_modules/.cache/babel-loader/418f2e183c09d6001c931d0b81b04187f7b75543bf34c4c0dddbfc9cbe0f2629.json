{"ast":null,"code":"import { isBrowser } from \"./tools/isBrowser\";\nimport { assert } from \"tsafe/assert\";\nimport { startClientSideIsDarkLogic } from \"./useIsDark/client\";\nimport { Deferred } from \"./tools/Deferred\";\nlet isStarted = false;\nexport async function start(params) {\n  const {\n    defaultColorScheme,\n    verbose,\n    nextParams,\n    doCheckNonce,\n    trustedTypesPolicyName\n  } = params;\n  assert(isBrowser);\n  if (isStarted) {\n    return;\n  }\n  isStarted = true;\n  const registerEffectAction = nextParams === undefined ? action => action() : nextParams.registerEffectAction;\n  startClientSideIsDarkLogic({\n    \"colorSchemeExplicitlyProvidedAsParameter\": defaultColorScheme,\n    \"doPersistDarkModePreferenceWithCookie\": nextParams === undefined ? false : nextParams.doPersistDarkModePreferenceWithCookie,\n    registerEffectAction,\n    doCheckNonce,\n    trustedTypesPolicyName\n  });\n  // @ts-expect-error\n  window.dsfr = {\n    verbose,\n    \"mode\": \"react\"\n  };\n  // @ts-expect-error\n  await import(\"./dsfr/dsfr.module.min\");\n  dDsfrLoaded.resolve();\n  registerEffectAction(() => {\n    // @ts-expect-error\n    window.dsfr.start();\n  });\n}\nconst dDsfrLoaded = new Deferred();\nexport const prDsfrLoaded = dDsfrLoaded.pr;","map":{"version":3,"names":["isBrowser","assert","startClientSideIsDarkLogic","Deferred","isStarted","start","params","defaultColorScheme","verbose","nextParams","doCheckNonce","trustedTypesPolicyName","registerEffectAction","undefined","action","doPersistDarkModePreferenceWithCookie","window","dsfr","dDsfrLoaded","resolve","prDsfrLoaded","pr"],"sources":["C:\\Users\\alban\\node_modules\\@codegouvfr\\react-dsfr\\src\\start.ts"],"sourcesContent":["import { isBrowser } from \"./tools/isBrowser\";\nimport { assert } from \"tsafe/assert\";\nimport type { ColorScheme } from \"./useIsDark\";\nimport { startClientSideIsDarkLogic } from \"./useIsDark/client\";\nimport { Deferred } from \"./tools/Deferred\";\n\ntype Params = {\n    defaultColorScheme: ColorScheme | \"system\";\n    verbose: boolean;\n    nextParams:\n        | {\n              doPersistDarkModePreferenceWithCookie: boolean;\n              registerEffectAction: (effect: () => void) => void;\n          }\n        | undefined;\n    doCheckNonce: boolean;\n    trustedTypesPolicyName: string;\n};\n\nlet isStarted = false;\n\nexport async function start(params: Params) {\n    const { defaultColorScheme, verbose, nextParams, doCheckNonce, trustedTypesPolicyName } =\n        params;\n\n    assert(isBrowser);\n\n    if (isStarted) {\n        return;\n    }\n\n    isStarted = true;\n\n    const registerEffectAction: (action: () => void) => void =\n        nextParams === undefined ? action => action() : nextParams.registerEffectAction;\n\n    startClientSideIsDarkLogic({\n        \"colorSchemeExplicitlyProvidedAsParameter\": defaultColorScheme,\n        \"doPersistDarkModePreferenceWithCookie\":\n            nextParams === undefined ? false : nextParams.doPersistDarkModePreferenceWithCookie,\n        registerEffectAction,\n        doCheckNonce,\n        trustedTypesPolicyName\n    });\n\n    // @ts-expect-error\n    window.dsfr = {\n        verbose,\n        \"mode\": \"react\"\n    };\n\n    // @ts-expect-error\n    await import(\"./dsfr/dsfr.module.min\");\n\n    dDsfrLoaded.resolve();\n\n    registerEffectAction(() => {\n        // @ts-expect-error\n        window.dsfr.start();\n    });\n}\n\nconst dDsfrLoaded = new Deferred<void>();\n\nexport const prDsfrLoaded = dDsfrLoaded.pr;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,MAAM,QAAQ,cAAc;AAErC,SAASC,0BAA0B,QAAQ,oBAAoB;AAC/D,SAASC,QAAQ,QAAQ,kBAAkB;AAe3C,IAAIC,SAAS,GAAG,KAAK;AAErB,OAAO,eAAeC,KAAKA,CAACC,MAAc;EACtC,MAAM;IAAEC,kBAAkB;IAAEC,OAAO;IAAEC,UAAU;IAAEC,YAAY;IAAEC;EAAsB,CAAE,GACnFL,MAAM;EAEVL,MAAM,CAACD,SAAS,CAAC;EAEjB,IAAII,SAAS,EAAE;IACX;;EAGJA,SAAS,GAAG,IAAI;EAEhB,MAAMQ,oBAAoB,GACtBH,UAAU,KAAKI,SAAS,GAAGC,MAAM,IAAIA,MAAM,EAAE,GAAGL,UAAU,CAACG,oBAAoB;EAEnFV,0BAA0B,CAAC;IACvB,0CAA0C,EAAEK,kBAAkB;IAC9D,uCAAuC,EACnCE,UAAU,KAAKI,SAAS,GAAG,KAAK,GAAGJ,UAAU,CAACM,qCAAqC;IACvFH,oBAAoB;IACpBF,YAAY;IACZC;GACH,CAAC;EAEF;EACAK,MAAM,CAACC,IAAI,GAAG;IACVT,OAAO;IACP,MAAM,EAAE;GACX;EAED;EACA,MAAM,MAAM,CAAC,wBAAwB,CAAC;EAEtCU,WAAW,CAACC,OAAO,EAAE;EAErBP,oBAAoB,CAAC,MAAK;IACtB;IACAI,MAAM,CAACC,IAAI,CAACZ,KAAK,EAAE;EACvB,CAAC,CAAC;AACN;AAEA,MAAMa,WAAW,GAAG,IAAIf,QAAQ,EAAQ;AAExC,OAAO,MAAMiB,YAAY,GAAGF,WAAW,CAACG,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}