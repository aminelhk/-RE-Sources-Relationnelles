{"ast":null,"code":"import { useMemo } from \"react\";\nimport { capitalize } from \"tsafe/capitalize\";\nfunction getLanguageBestApprox(params) {\n  const {\n    languages,\n    languageLike\n  } = params;\n  scope: {\n    const lang = languages.find(lang => lang.toLowerCase() === languageLike.toLowerCase());\n    if (lang === undefined) {\n      break scope;\n    }\n    return lang;\n  }\n  scope: {\n    const iso2LanguageLike = languageLike.split(\"-\")[0].toLowerCase();\n    const lang = languages.find(lang => lang.toLowerCase().includes(iso2LanguageLike));\n    if (lang === undefined) {\n      break scope;\n    }\n    return lang;\n  }\n  return undefined;\n}\nlet useLang_glob = () => \"fr\";\nexport function setUseLang(params) {\n  useLang_glob = params.useLang;\n}\nexport function useLang() {\n  return useLang_glob();\n}\nexport function createComponentI18nApi(params) {\n  const {\n    componentName,\n    frMessages\n  } = params;\n  const messagesByLang = {\n    \"fr\": frMessages\n  };\n  function useTranslation() {\n    const lang = useLang();\n    const bestMatchLang = useMemo(() => {\n      const bestApproxLang = getLanguageBestApprox({\n        \"languages\": Object.keys(messagesByLang),\n        \"languageLike\": lang\n      });\n      return bestApproxLang !== null && bestApproxLang !== void 0 ? bestApproxLang : \"fr\";\n    }, [lang]);\n    function t(messageKey, params) {\n      var _a;\n      const messageOrFn = (_a = messagesByLang[bestMatchLang][messageKey]) !== null && _a !== void 0 ? _a : messagesByLang[\"fr\"][messageKey];\n      return params === undefined ? messageOrFn : messageOrFn(params);\n    }\n    return {\n      t\n    };\n  }\n  function addTranslations(params) {\n    const {\n      lang,\n      messages\n    } = params;\n    Object.entries(messages).filter(([, value]) => value !== undefined).forEach(([key, value]) => {\n      var _a;\n      var _b;\n      return ((_a = (_b = messagesByLang)[lang]) !== null && _a !== void 0 ? _a : _b[lang] = {})[key] = value;\n    });\n  }\n  return {\n    useTranslation,\n    [`add${capitalize(componentName)}Translations`]: addTranslations\n  };\n}","map":{"version":3,"names":["useMemo","capitalize","getLanguageBestApprox","params","languages","languageLike","scope","lang","find","toLowerCase","undefined","iso2LanguageLike","split","includes","useLang_glob","setUseLang","useLang","createComponentI18nApi","componentName","frMessages","messagesByLang","useTranslation","bestMatchLang","bestApproxLang","Object","keys","t","messageKey","messageOrFn","_a","addTranslations","messages","entries","filter","value","forEach","key","_b"],"sources":["C:\\Users\\alban\\node_modules\\@codegouvfr\\react-dsfr\\src\\i18n.ts"],"sourcesContent":["import { useMemo } from \"react\";\nimport { capitalize } from \"tsafe/capitalize\";\n\ntype ReactNode = string | JSX.Element | null;\n\nfunction getLanguageBestApprox<Language extends string>(params: {\n    languages: readonly Language[];\n    languageLike: string;\n}): Language | undefined {\n    const { languages, languageLike } = params;\n\n    scope: {\n        const lang = languages.find(lang => lang.toLowerCase() === languageLike.toLowerCase());\n\n        if (lang === undefined) {\n            break scope;\n        }\n\n        return lang;\n    }\n\n    scope: {\n        const iso2LanguageLike = languageLike.split(\"-\")[0].toLowerCase();\n\n        const lang = languages.find(lang => lang.toLowerCase().includes(iso2LanguageLike));\n\n        if (lang === undefined) {\n            break scope;\n        }\n\n        return lang;\n    }\n\n    return undefined;\n}\n\ntype FrMessagesToTranslationFunction<\n    FrMessages extends Record<string, ReactNode | ((params: any) => ReactNode)>\n> = {\n    <K extends NonFunctionMessageKey<FrMessages>>(messageKey: K): FrMessages[K] extends (\n        params: any\n    ) => infer R\n        ? R\n        : FrMessages[K];\n} & {\n    <K extends FunctionMessageKey<FrMessages>>(\n        messageKey: K,\n        params: ExtractArgument<FrMessages[K]>\n    ): FrMessages[K] extends (params: any) => infer R ? R : FrMessages[K];\n};\n\ntype ExtractArgument<Message extends ReactNode | ((params: any) => ReactNode)> = Message extends (\n    params: any\n) => any\n    ? Parameters<Message>[0]\n    : never;\n\ntype NonFunctionMessageKey<\n    FrMessages extends Record<string, ReactNode | ((params: any) => ReactNode)>\n> = {\n    [Key in keyof FrMessages]: FrMessages[Key] extends (params: any) => any ? never : Key;\n    //[Key in keyof FrMessages]: FrMessages[Key] extends \"accept all\" ? \"accept all\" : never;\n}[keyof FrMessages];\n\ntype FunctionMessageKey<\n    FrMessages extends Record<string, ReactNode | ((params: any) => ReactNode)>\n> = Exclude<keyof FrMessages, NonFunctionMessageKey<FrMessages>>;\n\nlet useLang_glob = () => \"fr\";\n\nexport function setUseLang(params: { useLang: () => string }) {\n    useLang_glob = params.useLang;\n}\n\nexport function useLang() {\n    return useLang_glob();\n}\n\nexport function createComponentI18nApi<\n    ComponentName extends string,\n    FrMessages extends Record<string, ReactNode | ((params: any) => ReactNode)>\n>(params: {\n    componentName: ComponentName;\n    frMessages: FrMessages;\n}): {\n    useTranslation: () => { t: FrMessagesToTranslationFunction<FrMessages> };\n} & Record<\n    `add${Capitalize<ComponentName>}Translations`,\n    (params: { lang: string; messages: Partial<FrMessages> }) => void\n> {\n    const { componentName, frMessages } = params;\n\n    const messagesByLang = { \"fr\": frMessages };\n\n    function useTranslation() {\n        const lang = useLang();\n\n        const bestMatchLang = useMemo(() => {\n            const bestApproxLang = getLanguageBestApprox({\n                \"languages\": Object.keys(messagesByLang),\n                \"languageLike\": lang\n            });\n\n            return bestApproxLang ?? \"fr\";\n        }, [lang]);\n\n        function t(messageKey: keyof FrMessages, params?: any): ReactNode {\n            const messageOrFn =\n                (messagesByLang as any)[bestMatchLang][messageKey] ??\n                (messagesByLang[\"fr\"] as any)[messageKey];\n\n            return params === undefined ? messageOrFn : messageOrFn(params);\n        }\n\n        return { t };\n    }\n\n    function addTranslations(params: { lang: string; messages: Partial<FrMessages> }) {\n        const { lang, messages } = params;\n\n        Object.entries(messages)\n            .filter(([, value]) => value !== undefined)\n            .forEach(([key, value]) => (((messagesByLang as any)[lang] ??= {})[key] = value));\n    }\n\n    return {\n        useTranslation,\n        [`add${capitalize(componentName)}Translations`]: addTranslations\n    } as any;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}