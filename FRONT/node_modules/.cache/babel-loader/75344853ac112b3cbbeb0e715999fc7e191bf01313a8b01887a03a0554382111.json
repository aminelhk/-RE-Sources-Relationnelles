{"ast":null,"code":"import { start } from \"./start\";\nimport { setLink } from \"./link\";\nimport { setUseLang } from \"./i18n\";\nimport { assert } from \"tsafe/assert\";\nexport function startReactDsfr(params) {\n  const {\n    defaultColorScheme,\n    verbose = false,\n    Link,\n    useLang,\n    nonce,\n    trustedTypesPolicyName = \"react-dsfr\"\n  } = params;\n  if (Link !== undefined) {\n    setLink({\n      Link\n    });\n  }\n  if (useLang !== undefined) {\n    setUseLang({\n      useLang\n    });\n  }\n  assert(nonce !== \"\", \"nonce cannot be an empty string\");\n  const doCheckNonce = nonce !== undefined;\n  if (doCheckNonce) {\n    window.ssrNonce = nonce;\n  }\n  start({\n    defaultColorScheme,\n    verbose,\n    doCheckNonce,\n    trustedTypesPolicyName,\n    \"nextParams\": undefined\n  });\n}\nexport { setUseLang };","map":{"version":3,"names":["start","setLink","setUseLang","assert","startReactDsfr","params","defaultColorScheme","verbose","Link","useLang","nonce","trustedTypesPolicyName","undefined","doCheckNonce","window","ssrNonce"],"sources":["C:\\Users\\alban\\node_modules\\@codegouvfr\\react-dsfr\\src\\spa.ts"],"sourcesContent":["import { start } from \"./start\";\nimport type { RegisterLink, RegisteredLinkProps } from \"./link\";\nimport { setLink } from \"./link\";\nimport { setUseLang } from \"./i18n\";\nimport type { ColorScheme } from \"./useIsDark\";\nimport { assert } from \"tsafe/assert\";\n\nexport type { RegisterLink, RegisteredLinkProps };\n\nexport function startReactDsfr(params: {\n    defaultColorScheme: ColorScheme | \"system\";\n    /** Default: false */\n    verbose?: boolean;\n    /** Default: <a /> */\n    Link?: RegisterLink extends { Link: infer Link } ? Link : undefined;\n    /** Default: ()=> \"fr\" */\n    useLang?: () => string;\n    /**\n     * When set, the value will be used as the nonce attribute of subsequent script tags.\n     *\n     * @see https://developer.mozilla.org/fr/docs/Web/HTML/Global_attributes/nonce\n     */\n    nonce?: string;\n    /**\n     * Enable Trusted Types with a custom policy name.\n     *\n     * `<trustedTypesPolicyName>` and `<trustedTypesPolicyName>-asap` should be set in your Content-Security-Policy header.\n     *\n     * For example:\n     * ```txt\n     * With a policy name of \"react-dsfr\":\n     * Content-Security-Policy:\n     *  require-trusted-types-for 'script';\n     *  trusted-types react-dsfr react-dsfr-asap nextjs nextjs#bundler;\n     * ```\n     *\n     * @see https://developer.mozilla.org/fr/docs/Web/HTTP/Headers/Content-Security-Policy/trusted-types\n     * @see {@link DEFAULT_TRUSTED_TYPES_POLICY_NAME}\n     * @default \"react-dsfr\"\n     */\n    trustedTypesPolicyName?: string;\n}) {\n    const {\n        defaultColorScheme,\n        verbose = false,\n        Link,\n        useLang,\n        nonce,\n        trustedTypesPolicyName = \"react-dsfr\"\n    } = params;\n\n    if (Link !== undefined) {\n        setLink({ Link });\n    }\n\n    if (useLang !== undefined) {\n        setUseLang({ useLang });\n    }\n\n    assert(nonce !== \"\", \"nonce cannot be an empty string\");\n\n    const doCheckNonce = nonce !== undefined;\n    if (doCheckNonce) {\n        window.ssrNonce = nonce;\n    }\n\n    start({\n        defaultColorScheme,\n        verbose,\n        doCheckNonce,\n        trustedTypesPolicyName,\n        \"nextParams\": undefined\n    });\n}\n\nexport { setUseLang };\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,SAAS;AAE/B,SAASC,OAAO,QAAQ,QAAQ;AAChC,SAASC,UAAU,QAAQ,QAAQ;AAEnC,SAASC,MAAM,QAAQ,cAAc;AAIrC,OAAM,SAAUC,cAAcA,CAACC,MAgC9B;EACG,MAAM;IACFC,kBAAkB;IAClBC,OAAO,GAAG,KAAK;IACfC,IAAI;IACJC,OAAO;IACPC,KAAK;IACLC,sBAAsB,GAAG;EAAY,CACxC,GAAGN,MAAM;EAEV,IAAIG,IAAI,KAAKI,SAAS,EAAE;IACpBX,OAAO,CAAC;MAAEO;IAAI,CAAE,CAAC;;EAGrB,IAAIC,OAAO,KAAKG,SAAS,EAAE;IACvBV,UAAU,CAAC;MAAEO;IAAO,CAAE,CAAC;;EAG3BN,MAAM,CAACO,KAAK,KAAK,EAAE,EAAE,iCAAiC,CAAC;EAEvD,MAAMG,YAAY,GAAGH,KAAK,KAAKE,SAAS;EACxC,IAAIC,YAAY,EAAE;IACdC,MAAM,CAACC,QAAQ,GAAGL,KAAK;;EAG3BV,KAAK,CAAC;IACFM,kBAAkB;IAClBC,OAAO;IACPM,YAAY;IACZF,sBAAsB;IACtB,YAAY,EAAEC;GACjB,CAAC;AACN;AAEA,SAASV,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}